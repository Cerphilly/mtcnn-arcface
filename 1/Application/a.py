import os
import numpy as np

#similarity -> minimum similarity btw same person:0.41091153(image_0189 & image_0195), maximum similarity btw different person: 0.54342514(image_0118 & image_0361)
#distance -> maximum distance btw same person: 1.1781769(image_0189, image_0195), minimum distance btw different person: 0.9131498(image_0118, image_0361)
list = [['0001', '0002', '0003', '0004', '0005', '0006', '0007', '0008', '0009', '0010', '0011', '0012', '0013', '0014',
         '0015', '0016', '0017', '0018', '0019', '0020', '0021'],#min(same): 0.7100947, max(diff): 0.30920476 #difference: max(same): 0.57981056, min(diff): 1.3815906
        ['0022', '0023', '0024', '0025', '0026', '0027', '0028', '0029', '0030', '0031', '0032', '0033', '0034', '0035',
         '0036', '0037', '0038', '0039', '0040', '0041'],#min(same): 0.8004943, max(diff): 0.282601 #0.39901137, 1.4347979
        ['0042', '0043', '0044', '0045', '0046'],#min(same): 0.82944214, max(diff): 0.20681828 #0.3411158, 1.5863633
        ['0047', '0048', '0049', '0050', '0051', '0052', '0053', '0054', '0055', '0056', '0057', '0058', '0059', '0060',
         '0061', '0062', '0063', '0064', '0065', '0066', '0067', '0068'],#0.8768375, 0.25746888 #0.2463249, 1.4850624
        ['0069', '0070', '0071', '0072', '0073', '0074', '0075', '0076', '0077', '0078', '0079', '0080', '0081', '0082',
         '0083', '0084', '0085', '0086', '0087', '0088', '0089'],#0.7657417, 0.27978367 #0.46851653, 1.4404325
        ['0090', '0091', '0092', '0093', '0094', '0095', '0096', '0097', '0098', '0099', '0100', '0101', '0102', '0103',
         '0104', '0105', '0106', '0107', '0108', '0109', '0110', '0111', '0112'],#0.8467356, 0.29499543 #0.30652857, 1.4100091
        ['0113', '0114', '0115', '0116', '0117', '0118', '0119', '0120', '0121', '0122', '0123', '0124', '0125', '0126',
         '0127', '0128', '0129', '0130', '0131', '0132'],#0.91816247, 0.54342514 #0.16367492, 0.9131498
        ['0133', '0134', '0135', '0136', '0137'],#0.77210903, 0.23989812 #0.45578182, 1.5202036
        ['0138', '0139', '0140', '0141', '0142', '0143', '0144', '0145', '0146', '0147', '0148', '0149', '0150', '0151',
         '0152', '0153', '0154', '0155', '0156', '0157', '0158'],#0.86163974, 0.21709903 #0.2767204, 1.5658021
        ['0159', '0160', '0161', '0162', '0163', '0164', '0165'],#0.8351997, 0.30920476 #0.32960048, 1.3815906
        ['0166', '0167', '0168', '0169', '0170'],#0.90341413, 0.16462053 #0.19317174, 1.6707587
        ['0171', '0172', '0173', '0174', '0175'],#0.7142206, 0.20559023 #0.57155895, 1.588195
        ['0176', '0177', '0178', '0179', '0180', '0181', '0182', '0183', '0184', '0185', '0186', '0187', '0188', '0189',
         '0190', '0191', '0192', '0193', '0194', '0195'],#0.41091153, 0.3361135 #1.1781769, 1.3277731
        ['0196', '0197', '0198', '0199', '0200', '0201', '0202', '0203', '0204', '0205', '0206', '0207', '0208', '0209',
         '0210', '0211', '0212', '0213', '0214', '0215', '0216'],#0.91534555, 0.23164201 #0.16930893, 1.5367155
        ['0217', '0218', '0219', '0220', '0221', '0222', '0223', '0224', '0225', '0226', '0227', '0228', '0229', '0230',
         '0231', '0232', '0233', '0234', '0235', '0236', '0237', '0238', '0239', '0240', '0241'],#0.7924758, 0.26867738 #0.41504842, 1.4626452
        ['0242', '0243', '0244', '0245', '0246', '0247', '0248', '0249', '0250', '0251', '0252', '0253', '0254', '0255',
         '0256', '0257', '0258', '0259', '0260', '0261', '0262', '0263'],#0.8847871, 0.282601 #0.23042598, 1.4347979
        ['0264', '0265', '0266', '0267', '0268'],#0.67002124, 0.26867738 #0.6599577, 1.4626452
        ['0269', '0270', '0271', '0272', '0273', '0274', '0275', '0276', '0277', '0278', '0279', '0280', '0281', '0282',
         '0283', '0284', '0285', '0286', '0287'],#0.8649634, 0.20937482 #0.27007312, 1.5812507
        ['0288', '0289', '0290', '0291', '0292', '0293', '0294', '0295', '0296', '0297', '0298', '0299', '0300', '0301',
         '0302', '0303', '0304', '0305', '0306', '0307'],#0.76517785, 0.2468467 #0.4696444, 1.5063066
        ['0308', '0309', '0310', '0311', '0312', '0313', '0314', '0315', '0316', '0317', '0318', '0319', '0320', '0321',
         '0322', '0323', '0324', '0325', '0326', '0327', '0328', '0329', '0330', '0331', '0332', '0333', '0334', '0335',
         '0336'],#0.58761823, 0.29499543 #0.8247635, 1.4100091
        ['0337', '0338', '0339', '0340', '0341', '0342', '0343', '0344', '0345', '0346', '0347', '0348', '0350', '0351',
         '0352', '0353', '0354', '0355', '0356'],#0.8509299, 0.21018127 #0.29815418, 1.5796374
        ['0357', '0358', '0359', '0360', '0361', '0362', '0363', '0364', '0365', '0366', '0367', '0368', '0369', '0370',
         '0371', '0372', '0373', '0374', '0375', '0376'],#0.828493, 0.54342514 #0.34301373, 0.9131498
        ['0377', '0378', '0379', '0380', '0381', '0382', '0383', '0384', '0385', '0386', '0387', '0388', '0389', '0390',
         '0391', '0392', '0393', '0394', '0395', '0396', '0397', '0398'],#0.88934064, 0.23164201 #0.22131842, 1.5367155
        ['0399'],#0.9999999, 0.16798252 #0, 1.6640347
        ['0401'],#1, 0.27078366 #0, 1.4584327
        ['0404', '0405', '0406', '0407', '0408'],#0.8665712, 0.19563937 #0.26685762, 1.608721
        ['0409', '0410', '0411', '0412', '0413', '0414', '0415', '0416', '0417', '0418', '0419', '0420', '0421', '0422',
         '0423', '0424', '0425', '0426', '0427', '0428'],#0.902827, 0.27078366 #0.19434606, 1.4584327
        ['0429', '0430', '0431', '0432', '0433', '0434', '0435', '0436', '0437', '0438', '0439', '0440', '0441', '0442',
         '0443', '0444', '0445', '0446', '0447', '0448', '0449', '0450']]#0.8911494, 0.22085106 #0.21770123, 1.5582979

FACES_PATH = '/Users/aham/Downloads/faces_result/npy'

def sim(f1, f2):
    return np.dot(f1, f2.T)

def dist(f1, f2):
    return np.sum(np.square(f1-f2))


#threshold: error
#0.4: 800
#0.5: 80
#0.525: 56
#0.5375: 38
#0.55:36
#0.5525: 38
#0.555: 38
#0.56: 38
#0.575: 38
#0.6: 40
#0.7: 124
#0.8: 576



threshold = 0.55
error = 0

for a in range(len(list)):
    cur_list = list[a]
    print("cur_list: list[{}]".format(a))
    for i in range(len(cur_list)):
        a = np.load(FACES_PATH + '/image_{}.npy'.format(cur_list[i]))
        for j in range(len(list)):
            for k in range(len(list[j])):
                b = np.load(FACES_PATH + '/image_{}.npy'.format(list[j][k]))

                s = sim(a,b)

                if cur_list == list[j]:
                    #same_sim.append(s)
                    if s < threshold:
                        error += 1
                        print("error btw same face {} and {}".format(cur_list[i], list[j][k]))

                else:
                    if s > threshold:
                        error +=1
                        print("error btw diff face {} and {}".format(cur_list[i], list[j][k]))

print("total error of threshold {} is {}".format(threshold, error))



